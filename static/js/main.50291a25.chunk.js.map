{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","ReactReddit","props","handleChange","event","setState","sub","target","value","handleSubmit","console","log","state","query","loadData","preventDefault","a","data_reddit","fetch","response","json","data","children","map","val","push","error","this","className","id","href","onClick","index","url","src","thumbnail","alt","title","ups","React","Component","InputForm","onSubmit","type","onChange","placeholder","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXAC,E,kDAEJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAORC,aAAa,SAACC,GACZ,EAAKC,SAAS,CAACC,IAAKF,EAAMG,OAAOC,SATjB,EAYlBC,aAAa,SAACL,GACZM,QAAQC,IAAI,8BAAgC,EAAKC,MAAMN,KACvD,IAAIO,EAAM,EAAKD,MAAMN,IACrB,EAAKD,SAAS,CAACC,IAAK,EAAKM,MAAMN,MAC/B,EAAKQ,SAASD,GACdT,EAAMW,kBAjBU,EAoBlBD,SApBkB,sBAoBP,4CAAAE,EAAA,6DAAOH,EAAP,+BAAa,OAClBI,EAAY,GADP,SAGLP,QAAQC,IAAR,gBAAqBE,IAHhB,SAIgBK,MAAM,4BAAD,OAA6BL,EAA7B,gBAJrB,cAIDM,EAJC,gBAKWA,EAASC,OALpB,cAMDC,KAAKC,SAASC,KAAI,SAACC,GACrBP,EAAYQ,KAAKD,EAAIH,MACrB,EAAKhB,SAAS,CAAEY,mBARb,kDAUO,EAAKZ,SAAS,CAAEqB,MAAK,OAV5B,0DAlBT,EAAKd,MAAQ,CACXK,YAAa,GACbX,IAAI,IAJU,E,qDAkCT,IAAD,SACoBqB,KAAKf,MAAxBK,EADD,EACCA,YAGP,OAJM,EACaS,MAKf,6BACE,wBAAIE,UAAU,cAAa,qCAAiBD,KAAKf,MAAMN,IAAvD,oBACA,uBAAGuB,GAAG,WAAWC,KAAK,OAAtB,0BAKJ,6BACE,yBAAKF,UAAU,gBAAgBC,GAAG,OAChC,kBAAC,EAAD,CACE1B,aAAcwB,KAAKxB,aACnBM,aAAckB,KAAKlB,aACnBH,IAAKqB,KAAKf,MAAMN,MAEhB,wBAAIsB,UAAU,cAAa,qCAAiBD,KAAKf,MAAMN,KACvD,yBAAKsB,UAAU,uBAnBT,CAAC,OAAO,SAAS,YAAY,oBAAoB,OAAO,YAAY,YAAY,YAoBzEL,KAAI,SAAAC,GAAG,OAChB,yBAAKI,UAAU,aAAaG,QAAS,WACrC,EAAKjB,SAASU,GACdd,QAAQC,IAAR,wBAA6Ba,MAF7B,IAEuC,uBAAGM,KAAK,SAAR,MAAoBN,SAKjE,yBAAKI,UAAU,YAAYC,GAAG,QAC5BZ,EAAYM,KAAI,SAACf,EAAMwB,GAAP,OAClB,4BAAQJ,UAAU,YAChB,uBAAGE,KAAMtB,EAAMyB,IAAK1B,OAAO,UACzB,yBAAK2B,IAAK1B,EAAM2B,UAAWC,IAAK5B,EAAM6B,QACtC,oCAAa7B,EAAM6B,MACnB,uBAAGT,UAAU,gBAAb,IAA8BpB,EAAM8B,YAOxC,uBAAGT,GAAG,WAAWC,KAAK,QAAtB,8B,GA/EgBS,IAAMC,WAuF5BC,EAAU,SAACvC,GACb,OACE,0BAAMwC,SAAUxC,EAAMO,cACpB,+BACE,2BAAOkC,KAAK,OAAOnC,MAAON,EAAMI,IAAKsC,SAAU1C,EAAMC,aAAc0C,YAAY,sCAEjF,2BAAOF,KAAK,SAASnC,MAAM,aASjCsC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDoBpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACLhB,QAAQgB,MAAMA,EAAM+B,c","file":"static/js/main.50291a25.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { render } from '@testing-library/react';\n\n\nclass ReactReddit extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      data_reddit: [],\n      sub:''\n    };\n  }\n\n  handleChange=(event)=> {\n    this.setState({sub: event.target.value});\n  }\n\n  handleSubmit=(event)=> {\n    console.log('A subreddit was submitted: ' + this.state.sub);\n    let query=this.state.sub;\n    this.setState({sub: this.state.sub});\n    this.loadData(query);\n    event.preventDefault();\n  }\n  \n  loadData = async (query='pics')=>{\n    let data_reddit=[];\n      try{\n        console.log(`query ${query}`)\n        let response = await fetch(`https://www.reddit.com/r/${query}/hot/.json?`);\n        let res = await response.json();\n        res.data.children.map((val)=>{     \n          data_reddit.push(val.data)\n          this.setState({ data_reddit});\n      })}\n      catch(error){ this.setState({ error });}\n  }\n\n \n  render(){\n    const {data_reddit,error}=this.state;\n    let subreddit=['nasa','spacex','wallpaper','interestingasfuck','pics','spaceporn','earthporn','unixporn'];\n\n    if (error) {\n      return (\n        <div>\n          <h2 className='headbanner'><span>/r/</span>{this.state.sub} doesn't exist..</h2>\n          <a id='goto_top' href=\"top\">Search something else</a>\n        </div>);\n    }\n\n    return(\n      <div>\n        <div className='formcontainer' id='top'>\n          <InputForm\n            handleChange={this.handleChange}\n            handleSubmit={this.handleSubmit}\n            sub={this.state.sub}\n            />\n            <h2 className='headbanner'><span>/r/</span>{this.state.sub}</h2>\n            <div className='suggestionContainer'>\n              {subreddit.map(val=>\n                <div className='suggestion' onClick={()=>{        //recommended subs\n                this.loadData(val)\n                console.log(`div clicked : ${val}`)}}> <a href=\"#cont\">/r/{val}</a></div>\n              )}\n            </div>\n          </div>\n  \n          <div className='container' id='cont'>\n          { data_reddit.map((value,index) => \n          <figure className='grid-fig'>\n            <a href={value.url} target='_blank'>\n              <img src={value.thumbnail} alt={value.title}/> \n              <figcaption>{value.title}\n              <i className=\"fas fa-heart\"> {value.ups}</i>\n              </figcaption>\n            </a>\n          </figure>\n            )\n          }\n          </div>\n          <a id='goto_top' href=\"#top\">Search something else</a>\n\n      </div>\n      \n      );\n  }\n}\n\nlet InputForm=(props)=>{ //COMPONENT FOR FORM\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <label>\n        <input type=\"text\" value={props.sub} onChange={props.handleChange} placeholder='search your favorite subreddit..'/>\n      </label>\n      <input type=\"submit\" value=\"Search\" />\n    </form>\n  );\n}\n\n\n\n\n\nReactDOM.render(\n  <ReactReddit/>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}